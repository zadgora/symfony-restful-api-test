security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        users_in_memory:
            memory:
                users:
                    john_admin: { password: '$2y$13$XoDh4gAjlJLh5VZ2Pxmcw.mixJLR1hp3AapKqDer1FVbdpajIJg0.', roles: ['ROLE_ADMIN'] }
                    jane_super_admin: { password: '$2y$13$XoDh4gAjlJLh5VZ2Pxmcw.mixJLR1hp3AapKqDer1FVbdpajIJg0.', roles: ['ROLE_ADMIN', 'ROLE_SUPER_ADMIN'] }
        # users_in_memory: { memory: null }
        # app_user_provider:
        #    entity:
        #        class: App\Entity\User
        #        property: email
        
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        login:
            pattern: ^/api/v1/users/login
            stateless: true
            json_login:
                check_path: /api/v1/users/login
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        refresh:
            pattern: ^/api/v1/users/token/refresh
            stateless: true

        register:
            pattern: ^/api/v1/users/register
            stateless: true

        api:            
            pattern: ^/api/v1
            stateless: true
            guard:
                authenticators:
                  - lexik_jwt_authentication.jwt_token_authenticator

        main:
            lazy: true
            provider: users_in_memory
            # provider: app_user_provider

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
         - { path: ^/api/v1/users/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
         - { path: ^/api/v1/users/register, roles: IS_AUTHENTICATED_ANONYMOUSLY }
         - { path: ^/api/v1/userstoken/refresh, roles: IS_AUTHENTICATED_ANONYMOUSLY }
         - { path: ^/api/v1, roles: IS_AUTHENTICATED_FULLY }